# -*- coding: utf-8 -*-
"""
Created on Fri Oct  2 11:38:13 2020

@author: pc
"""
# Standard library import
import numpy as np


def H_function(n):
    """ Weighting functions Hi definition for each 1-bark-wide interval i 
    
    Parameters
    ------------
    N : integer
        excitation envelope function size
        
    Outputs
    -------
    H : numpy.array
        47 weighting functions Hi
    
    
        H2, H16 and H42 are given, the others are derived from them 
        in the following way:
        for i = 1,2, ... ,4 (Zi = 0.5,1, ... ,2 Bark)
            HI = H2 = H3 = H4
        for i = 6,8, ... , 16 (Zi = 3,4, ... ,8 Bark) :
            Hi-l = Hi and
            Hi is linearly interpolated between H4 and H16
        for i = 17,18,19,20 (Zi = 7.5,8, ... ,lOBark):
            Hi = H16
        for i = 22,24, ... ,42 (Zi = 11,12, ... ,21 Bark):
            Hi-l = Hi and
            Hi is linearly interpolated between H20 and H42
        for i = 43,44, ... ,47 (Zi = 21.5,22, ... ,23.5 Bark):
            Hi = H42.
               
    """
    
    
    H = np.zeros((47,n))

    
    # H2, H16 and H42 are given
    
    H2 = np.array([0, 0.250107, 0.448822, 0.65496285, 0.86681059, 0.95160573,
 1.00043,    0.97901511, 0.95781563, 0.93386329, 0.90761121, 0.87397379,
 0.84556782, 0.81781584, 0.79287728, 0.76934548, 0.74585257, 0.72239079,
 0.698929,   0.68016041, 0.66139183, 0.64159976, 0.62052812, 0.59945648,
 0.57861017, 0.55956496, 0.54051975, 0.52147454, 0.50312476, 0.48616544,
 0.46927674, 0.45295242, 0.4366281,  0.42030379, 0.40471029, 0.390578,
 0.37644571, 0.36060009, 0.34389754, 0.327195,   0.31355577, 0.29991655,
 0.28665118, 0.276374,   0.26514466, 0.25272491, 0.24030516, 0.22788541,
 0.21600201, 0.20478917, 0.19357633, 0.18236349, 0.17137734, 0.16045594,
 0.14959365, 0.13920382, 0.12881399, 0.11842416, 0.10803433, 0.0976445,
 0.09094134, 0.08423818, 0.07684341, 0.06858399, 0.06032456, 0.05206513,
 0.04380571, 0.03554628, 0.02767966, 0.02118801, 0.01469636, 0.01276445,
 0.00805139, 0.00291221, 0.00171306, 0])    
    H[1,:] = np.concatenate((H2,np.zeros(n-H2.size)))


    H16 = np.array([0,
0.0751207,0.159631,0.244142,0.345433,0.448822,0.549893,0.63212,0.705782,0.779443,
0.853105,0.901071,0.937045,0.970839,0.996812,0.995099,0.993386,0.990949,0.982726,
0.974503,0.96628,0.958058,0.94964,0.939664,0.929688,0.919712,0.909249,0.89781,
0.886372,0.874934,0.861295,0.847381,0.833467,0.819553,0.803574,0.783464,0.763355,
0.7391,0.71366,0.686294,0.657387,0.634176,0.612591,0.591007,0.571988,0.556174,
0.540361,0.524548,0.508418,0.489755,0.471092,0.462054,0.453016,0.443978,0.43494,
0.425902,0.416864,0.407375,0.397525,0.387675,0.377825,0.368016,0.358239,0.348462,
0.338685,0.328908,0.321371,0.313833,0.306296,0.298758,0.291221,0.283821,0.27642,
0.269159,0.262384,0.25561,0.248836,0.242061,0.235287,0.228513,0.221738,0.214924,
0.208104,0.201285,0.194466,0.187646,0.180751,0.17325,0.16575,0.158249,0.150749,
0.14561,0.140471,0.135332,0.130192,0.125053,0.119914,0.114775,0.109636,0.104497,
0.0993576,0.0962741,0.0931907,0.0901072,0.0870237,0.0839403,0.0808568,0.0773091,
0.0737033,0.0700976,0.0664918,0.062886,0.0592803,0.0556745,0.0520687,0.048463,
0.0448572,0.0412514,0.0376457,0.0340399,0.0304181,0.026668,0.0229178,0.0191677,
0.0154176,0.0116674,0.00791728,0  ])    
    H[15,:] = np.concatenate((H16,np.zeros(n-H16.size)))
        
    
    H42 = np.array([0,
0.115279,0.244968,0.377118,0.495455,0.581756,0.649423,0.716746,0.784069,0.851392,
0.902642,0.94761,0.969594,0.985011,0.99801,0.991661,0.980157,0.950607,0.92631,
0.901071,0.870236,0.845824,0.821412,0.797835,0.775927,0.754065,0.732366,0.710667,
0.690482,0.675596,0.66071,0.645824,0.634956,0.624088,0.61322,0.602352,0.591484,
0.580616,0.570493,0.562977,0.555461,0.547944,0.540428,0.532912,0.525396,0.517879,
0.510363,0.501871,0.491428,0.480984,0.47054,0.460243,0.449965,0.439686,0.429408,
0.419129,0.408851,0.399286,0.390292,0.381299,0.372305,0.363005,0.353462,0.343918,
0.334374,0.32483,0.31707,0.309532,0.301994,0.294457,0.286919,0.280051,0.273268,
0.266459,0.259451,0.252443,0.245435,0.238427,0.231419,0.224411,0.217403,0.210673,
0.204022,0.197371,0.19072,0.184069,0.177367,0.170251,0.163135,0.15602,0.148904,
0.143235,0.137979,0.132723,0.127467,0.122211,0.116955,0.111699,0.106443,0.101187,
0.0959315,0.0925677,0.0892039,0.0858401,0.0824763,0.0791125,0.0757488,0.0721956,
0.0686187,0.0650418,0.0614649,0.057888,0.0543111,0.0507342,0.0471573,0.0435804,
0.0400035,0.0364266,0.0328497,0.0292728,0.0256959,0.0225707,0.0194455,0.0163203,
0.0131952,0.01007,0 ])
    H[41,:] = np.concatenate((H42,np.zeros(n-H42.size)))

    # According to the article we have :       

    H[0,:] = H[2,:] = H[3,:] = H[1,:]
    H[14,:] = H[16,:] = H[17,:] = H[18,:] = H[19,:] = H[15,:]
    H[40,:] = H[42,:] = H[43,:] = H[44,:] = H[45,:] = H[46,:] = H[41,:]

    # The others weighting functions are linearly interpolated:
        
    # between H4 and H16    
    xp = [4,16]
    for i in range(n):
        yp = [H[3,i],H[15,i]]
        H[5,i] = np.interp(6,xp,yp)
        H[7,i] = np.interp(8,xp,yp)
        H[9,i] = np.interp(10,xp,yp)
        H[11,i] = np.interp(12,xp,yp)
        H[13,i] = np.interp(14,xp,yp)
        
    H[4,:] = H[5,:]
    H[6,:] = H[7,:]
    H[8,:] = H[9,:]
    H[10,:] = H[11,:]
    H[12,:] = H[13,:]
    
    #between H20 and H42
    xp = [20,42]
    for i in range(n):
        yp = [H[19,i],H[41,i]]
        H[21,i] = np.interp(22,xp,yp)
        H[23,i] = np.interp(24,xp,yp)
        H[25,i] = np.interp(26,xp,yp)
        H[27,i] = np.interp(28,xp,yp)
        H[29,i] = np.interp(30,xp,yp)
        H[31,i] = np.interp(32,xp,yp)
        H[33,i] = np.interp(34,xp,yp)
        H[35,i] = np.interp(36,xp,yp)
        H[37,i] = np.interp(38,xp,yp)
        H[39,i] = np.interp(40,xp,yp)
    
    H[20,:] = H[21,:]
    H[22,:] = H[23,:]
    H[24,:] = H[25,:]
    H[26,:] = H[27,:]
    H[28,:] = H[29,:]
    H[30,:] = H[31,:]
    H[32,:] = H[33,:]
    H[34,:] = H[35,:]
    H[36,:] = H[37,:]
    H[38,:] = H[39,:] 
    
    return H    